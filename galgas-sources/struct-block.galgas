#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @block {
  public var @stringlist mInputVariableList
  public var @stringlist mOutputVariableList
  public var @binaryset mStates
  public var @binaryset mTransitions
}

#·······················································································································
# Ensemble des états complets : ∃s', ∀e' : (e, s) -> (e', s') est une transition et ((e, s) un état

getter @block uncompleteStates -> @binaryset {
  let outputVarCount = [self.mOutputVariableList count]
  let inputVarCount = [self.mInputVariableList count]
  let variableCount = inputVarCount + outputVarCount
  var tr = self.mTransitions
  tr = [tr existsOnBitRange !variableCount !outputVarCount]
#  message "" + [tr valueCount !2*variableCount] + " temp1 states (" + [tr nodeCount]
#       + " BDD nodes):\n"
  tr = [tr forAllOnBitIndexAndBeyond !variableCount]
#  message "" + [tr valueCount !variableCount] + " temp2 states (" + [tr nodeCount]
#       + " BDD nodes):\n"
  result = self.mStates & ~ tr
}

#·······················································································································

private func displayState
  ?let @string inCompressedStringValue
  ?let @stringlist inInputVariableList
  ?let @stringlist inOutputVariableList -> @string {
  var compressedString = [inCompressedStringValue reversedString]
  var outputList = ""
  for (varName) in inOutputVariableList do
    [!?compressedString removeCharacterAtIndex ?let char !0]
    outputList += @string.stringWithSequenceOfCharacters {!' ' ![varName count] - 1}
    outputList += " " + char
  end
  var inputList = ""
  for (varName) in inInputVariableList do
    [!?compressedString removeCharacterAtIndex ?let char !0]
    inputList += @string.stringWithSequenceOfCharacters {!' ' ![varName count] - 1}
    inputList += " " + char
  end
  result = inputList + " :" + outputList
}

#·······················································································································

method @block displayStates ?let @binaryset inStates {
  let outputVarCount = [self.mOutputVariableList count]
  let inputVarCount = [self.mInputVariableList count]
  let variableCount = inputVarCount + outputVarCount
  var line = "  "
  for (s) in self.mInputVariableList do
    line += " " + s
  end
  line += " :"
  for (s) in self.mOutputVariableList do
    line += " " + s
  end
  print (!line + "\n")
  let stateList = [inStates compressedStringValueList !variableCount]
  for (s) in stateList do
    print (!"  " + displayState (!s !self.mInputVariableList !self.mOutputVariableList) + "\n")
  end
}

#·······················································································································

getter @block ambiguousTransitions -> @binaryset {
  let outputVarCount = [self.mOutputVariableList count]
  let inputVarCount = [self.mInputVariableList count]
  let variableCount = inputVarCount + outputVarCount
# Ensemble des transitions ambiguës :
# ∀(e, s) état, ∃(e, s) -> (e', s') transition, ∃(e, s) -> (e", s") transition et e' = e" et s' != s"
  result = self.mTransitions & [self.mTransitions binarySetByTranslatingFromIndex !variableCount !variableCount]
#--- Constraint e' = e"
  let inputConstraint = @binaryset.binarySetWithEqualComparison {
    !variableCount + outputVarCount # e'
    !inputVarCount
    !2 * variableCount + outputVarCount # e"
  }
  result = result & inputConstraint
#--- Constraint s' ≠ s"
  let outputConstraint = @binaryset.binarySetWithNotEqualComparison {
    !variableCount # s'
    !outputVarCount
    !2 * variableCount # s"
  }
  result = result & outputConstraint
#--- Suppress (e", s")
  result = [result existOnBitIndexAndBeyond !2 * variableCount]
}

#·······················································································································

method @block displayTransitions ?let @binaryset inTransitions {
  let outputVarCount = [self.mOutputVariableList count]
  let inputVarCount = [self.mInputVariableList count]
  let variableCount = inputVarCount + outputVarCount
  var line = " "
  for (s) in self.mInputVariableList do
    line += " " + s
  end
  line += " :"
  for (s) in self.mOutputVariableList do
    line += " " + s
  end
  line += "  --> "
  for (s) in self.mInputVariableList do
    line += " " + s
  end
  line += " :"
  for (s) in self.mOutputVariableList do
    line += " " + s
  end
  print (!line + "\n")
  let transitionList = [inTransitions compressedStringValueList !2 * variableCount]
  for (s) in transitionList do
    let source = [s subString !variableCount !variableCount]
    let target = [s subString !0 !variableCount]
    var line = " " + displayState (!source !self.mInputVariableList !self.mOutputVariableList)
    line +=  "  --> " + displayState (!target !self.mInputVariableList !self.mOutputVariableList)
    print (!line + "\n")
  end
}

#·······················································································································
# Ensemble des états non combinatoires
# : (e, s) est un état -> (e', s') est un état et e = e' et s ≠ s'

getter @block nonCombinatoryStates -> @binaryset {
  let outputVarCount = [self.mOutputVariableList count]
  let inputVarCount  = [self.mInputVariableList count]
  let variableCount  = inputVarCount + outputVarCount
  result = self.mStates & [self.mStates binarySetByTranslatingFromIndex !0 !variableCount]
#--- Constraint e = e'
  let inputConstraint = @binaryset.binarySetWithEqualComparison {
    !outputVarCount # e
    !inputVarCount
    !variableCount + outputVarCount # e"
  }
  result = result & inputConstraint
#--- Constraint s' ≠ s"
  let outputConstraint = @binaryset.binarySetWithNotEqualComparison {
    !0 # s'
    !outputVarCount
    !variableCount # s"
  }
  result = result & outputConstraint
#---
  result = [result existOnBitIndexAndBeyond !variableCount]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

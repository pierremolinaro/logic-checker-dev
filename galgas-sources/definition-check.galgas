#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @checkDefinition : @definition {
  public var @lstring mBlockName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension logicchecker_syntax {

  #·····················································································································

  rule <definition> !@definition outDefinition {
    $check$
    $identifier$ ?let blockName
    outDefinition = @checkDefinition.init {!blockName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @checkDefinition compute ?!@blockMap blockMap ?let @string unused inSourceFile {
  print (!"--------------- Check " + self.mBlockName + "\n")
  [blockMap searchKey !self.mBlockName ?let bloc]
  let outputVarCount = [bloc.mOutputVariableList count]
  let inputVarCount = [bloc.mInputVariableList count]
  let variableCount = inputVarCount + outputVarCount
#  log inputVarCount, outputVarCount
#------------------------------ Check states are complete
  let incompleteStates = [bloc uncompleteStates]
  let incompleteStateCount = [incompleteStates valueCount !variableCount]
  if incompleteStateCount == 0 then
    print (!"All states are complete.\n")
  else
    error.nowhere : ""
       + incompleteStateCount + " incomplete state" + if incompleteStateCount > 1 then "s" else "" end + " ("
       + [incompleteStates nodeCount]
       + " BDD nodes):"
    [bloc displayStates !incompleteStates]
  end
#------------------------------ Check no ambiguous transition
  let ambiguousTransitions = [bloc ambiguousTransitions]
#--- Ambiguous transition count
  let ambiguousTransitionCount = [ambiguousTransitions valueCount !2 * variableCount]
#--- Display ampbiguous transitions
  if ambiguousTransitionCount == 0 then
    print (!"No ambiguous transition.\n")
  else
    error .nowhere :
      [ambiguousTransitionCount string]
      + " ambiguous transition" + if ambiguousTransitionCount > 1 then "s" else "" end + " ("
      + [[ambiguousTransitions nodeCount] string]
      + " BDD nodes):"
    [bloc displayTransitions !ambiguousTransitions]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @graphvizDefinition : @definition {
  @lstring mBlockName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension logicchecker_syntax {

  #·····················································································································

  rule <definition> !@definition outDefinition {
    $graphviz$
    $identifier$ ?let blockName
    outDefinition = @graphvizDefinition.new {!blockName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @graphvizDefinition compute ?!@blockMap blockMap {
  message "--------------- Graphviz " + mBlockName + "\n"
  [blockMap searchKey !mBlockName ?let inputVariableList ?let outputVariableList ?let states ?let transitions]
  let variableCount = [inputVariableList length] + [outputVariableList length]
  var graphviz = "digraph G {\n"
  graphviz += "node [shape=record fontname=helvetica style=rounded] ;\n"
#--- Display states result
  let stateList = [states compressedStringValueList !variableCount]
  for (s) in stateList do
    var st = s
    if [st length] < variableCount then
      st += @string.stringWithSequenceOfCharacters {!'X' !variableCount - [st length]}
    end
    graphviz += "\"" + st + "\" ;\n"
  end
#--- Display transitions
  let transitionList = [transitions compressedStringValueList !variableCount + variableCount]
  for (s) in transitionList do
    var transition = s
    if [transition length] < (variableCount + variableCount) then
      transition += @string.stringWithSequenceOfCharacters {!'X' !2 * variableCount - [transition length]}
    end
    let source = [transition subString !0 !variableCount]
    let target = [transition subString !variableCount !variableCount + variableCount]
    graphviz += "\"" + source + "\" -> \"" + target + "\" ;\n"
  end
  graphviz += "}\n\n"
  let filePath = @string.stringWithSourceFilePath + ".dot"
  [graphviz writeToFile !filePath]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


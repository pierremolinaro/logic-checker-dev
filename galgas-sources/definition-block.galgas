#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @expression {}

#·······················································································································

refclass @trueExpression : @expression {}

#·······················································································································

refclass @falseExpression : @expression {}

#·······················································································································

refclass @varExpression : @expression {
  public var @lstring mVariableName
}

#·······················································································································

refclass @negationExpression : @expression {
  public var @expression mExpression
}

#·······················································································································

refclass @andExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

refclass @orExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

refclass @xorExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

list @assignmentList {
  public var @lstring mTargetName
  public var @expression mExpression
}

#·······················································································································

list @importedBlockList {
  public var @lstring mBlockName
  public var @lstringlist mBlockInputVariableList
  public var @lstringlist mBlockOutputVariableList
}

#·······················································································································

refclass @blockDefinition : @definition {
  public var @lstring mBlockName
  public var @lstringlist mInputVariableList
  public var @lstringlist mInternalVariableList
  public var @lstringlist mOutputVariableList
  public var @assignmentList mAssignmentList
  public var @importedBlockList mImportedBlockList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension logicchecker_syntax {

  #·····················································································································

  rule <definition> !@definition outDefinition {
    $block$
    $identifier$ ?let blockName
    $($
    var @lstringlist inputVariableList = {}
    repeat
      $identifier$ ?let inputName
      inputVariableList += !inputName
    while
      $,$
    end
    $)$
    $->$
    $($
    var @lstringlist outputVariableList = {}
    repeat
      $identifier$ ?let outputName
      outputVariableList += !outputName
    while
      $,$
    end
    $)$
    ${$
    var @lstringlist internalVariableList = {}
    var @assignmentList assignmentList = {}
    var @importedBlockList importedBlockList = {}
    repeat
      <targetVariable> ?let firstTargetName !?internalVariableList
      select # Single assignment
        $=$
        select
          <expression> ?let expression
          $;$
          assignmentList += !firstTargetName !expression
        or
          <importBlock> ?let blockName ?let blockInputVariableName
          importedBlockList += !blockName !blockInputVariableName !{!firstTargetName}
          $;$
        end
      or
        var @lstringlist targetVarList = {!firstTargetName}
        repeat
          $,$
          <targetVariable> ?let targetName !?internalVariableList
          targetVarList += !targetName
         while
        end
        $=$
        <importBlock> ?let blockName ?let blockInputVariableName
        importedBlockList += !blockName !blockInputVariableName !targetVarList
        $;$
      end
    while
    end
    $}$
    outDefinition = @blockDefinition.new {
      !blockName
      !inputVariableList
      !internalVariableList
      !outputVariableList
      !assignmentList
      !importedBlockList
    }
  }

  #·····················································································································

  rule <targetVariable> !@lstring outTargetVarName ?!@lstringlist ioInternalVariableList {
    let @bool letDeclaration
    select
      letDeclaration = false
    or
      $let$
      letDeclaration = true
    end
    $identifier$ ?outTargetVarName
    if letDeclaration then
      ioInternalVariableList += !outTargetVarName
    end
  }
 
 
  #·····················································································································

  rule <importBlock> !@lstring outBlockName !@lstringlist outBlockInputVariableList {
    $identifier$ ?outBlockName
    $($
    outBlockInputVariableList = {}
    repeat
      $identifier$ ?let inputVarName
      outBlockInputVariableList += !inputVarName
    while
      $,$
    end
    $)$
  }

  #·····················································································································

  rule <expression> !@expression outExpression {
    <terme> ?outExpression
    repeat
    while
      $|$
      <terme> ?let expression
      outExpression = @orExpression.new {!outExpression !expression}
    while
      $^$
      <terme> ?let expression
      outExpression = @xorExpression.new {!outExpression !expression}
    end
  }
  
  #·····················································································································

  rule <terme> !@expression outExpression {
    <factor> ?outExpression
    repeat
    while
      $&$
      <factor> ?let expression
      outExpression = @andExpression.new {!outExpression !expression}
    end
  }
  
  #·····················································································································

  rule <factor> !@expression outExpression {
    $/$
    <factor> ?let expression
    outExpression = @negationExpression.new {!expression}
  }
  
  #·····················································································································

  rule <factor> !@expression outExpression {
    $identifier$ ?let variableName
    outExpression = @varExpression.new {!variableName}
  }
  
   #·····················································································································

  rule <factor> !@expression outExpression {
    $($
    <expression> ?outExpression
    $)$
  }
  
  #·····················································································································

  rule <factor> !@expression outExpression {
    $true$
    outExpression = @trueExpression.new
  }
  
  #·····················································································································

  rule <factor> !@expression outExpression {
    $false$
    outExpression = @falseExpression.new
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @variableMap {
  public var @uint mIndex
  %insertSetter insertKey %errorMessage "the '%K' variable is already declared in %L"
  %searchMethod searchKey %errorMessage "there is no '%K' variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   STATE COMPUTING
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @expression computeStateExpression ?let @variableMap inVariableMap -> @binaryset

#·······················································································································

override getter @falseExpression computeStateExpression ?let @variableMap unused inVariableMap -> @binaryset {
  result = @binaryset.emptyBinarySet
}

#·······················································································································

override getter @trueExpression computeStateExpression ?let @variableMap unused inVariableMap -> @binaryset {
  result = @binaryset.fullBinarySet
}

#·······················································································································

override getter @negationExpression computeStateExpression ?let @variableMap inVariableMap -> @binaryset {
  result = ~ [self.mExpression  computeStateExpression !inVariableMap]
}

#·······················································································································

override getter @varExpression computeStateExpression ?let @variableMap inVariableMap -> @binaryset {
  [inVariableMap searchKey !self.mVariableName ?let varIndex]
  result = @binaryset.binarySetWithBit {!varIndex}
}

#·······················································································································

override getter @andExpression computeStateExpression ?let @variableMap inVariableMap -> @binaryset {
  let left  = [self.mLeftExpression  computeStateExpression !inVariableMap]
  let right = [self.mRightExpression computeStateExpression !inVariableMap]
  result = left & right
}

#·······················································································································

override getter @orExpression computeStateExpression ?let @variableMap inVariableMap -> @binaryset {
  let left  = [self.mLeftExpression  computeStateExpression !inVariableMap]
  let right = [self.mRightExpression computeStateExpression !inVariableMap]
  result = left | right
}

#·······················································································································

override getter @xorExpression computeStateExpression ?let @variableMap inVariableMap -> @binaryset {
  let left  = [self.mLeftExpression  computeStateExpression !inVariableMap]
  let right = [self.mRightExpression computeStateExpression !inVariableMap]
  result = left ^ right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   TRANSITION COMPUTING
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @expression computeTransitionExpression
  ?let @variableMap unused inVariableMap
  ?let @uint unused inOutputVarCount -> @binaryset

#·······················································································································

override getter @falseExpression computeTransitionExpression 
  ?let @variableMap unused inVariableMap
  ?let @uint unused inOutputVarCount -> @binaryset {
  result = @binaryset.emptyBinarySet
}

#·······················································································································

override getter @trueExpression computeTransitionExpression 
  ?let @variableMap unused inVariableMap
  ?let @uint unused inOutputVarCount -> @binaryset {
  result = @binaryset.fullBinarySet
}

#·······················································································································

override getter @negationExpression computeTransitionExpression
  ?let @variableMap inVariableMap
  ?let @uint inOutputVarCount -> @binaryset
{
  result = ~ [self.mExpression  computeTransitionExpression !inVariableMap !inOutputVarCount]
}

#·······················································································································

override getter @varExpression computeTransitionExpression 
  ?let @variableMap inVariableMap
  ?let @uint inOutputVarCount -> @binaryset
{
  [inVariableMap searchKey !self.mVariableName ?let varIndex]
  if varIndex >= inOutputVarCount then # An input variable ?
    result = @binaryset.binarySetWithBit {!varIndex + [inVariableMap count]}
  else
    result = @binaryset.binarySetWithBit {!varIndex}
  end
}

#·······················································································································

override getter @andExpression computeTransitionExpression 
  ?let @variableMap inVariableMap
  ?let @uint inOutputVarCount -> @binaryset
{
  let left  = [self.mLeftExpression  computeTransitionExpression !inVariableMap !inOutputVarCount]
  let right = [self.mRightExpression computeTransitionExpression !inVariableMap !inOutputVarCount]
  result = left & right
}

#·······················································································································

override getter @orExpression computeTransitionExpression 
  ?let @variableMap inVariableMap
  ?let @uint inOutputVarCount -> @binaryset
{
  let left  = [self.mLeftExpression  computeTransitionExpression !inVariableMap !inOutputVarCount]
  let right = [self.mRightExpression computeTransitionExpression !inVariableMap !inOutputVarCount]
  result = left | right
}

#·······················································································································

override getter @xorExpression computeTransitionExpression 
  ?let @variableMap inVariableMap
  ?let @uint inOutputVarCount -> @binaryset
{
  let left  = [self.mLeftExpression  computeTransitionExpression !inVariableMap !inOutputVarCount]
  let right = [self.mRightExpression computeTransitionExpression !inVariableMap !inOutputVarCount]
  result = left ^ right
}

#·······················································································································

override method @blockDefinition compute
  ?!@blockMap blockMap
  ?let @string unused inSourceFile
{
  print (!"--------------- Block " + self.mBlockName + "\n")
#---------- Enter output variables
  var @variableMap variableMap = {}
  var @stringlist outputAndInternalVariableList = {}
  var @stringlist outputVariableList = {}
  var @variableMap outputVariableMap = {}
  for (name) in self.mOutputVariableList do
    let variableIndex = [variableMap count]
    [!?variableMap insertKey !name !variableIndex]
    [!?outputVariableMap insertKey !name !variableIndex]
    outputVariableList += !name.string
    outputAndInternalVariableList += !name.string
  end
  let outputVarCount = [outputVariableList length]
#---------- Enter internal variables
  let internalVarCount = [self.mInternalVariableList length]
  for (name) in self.mInternalVariableList do
    let variableIndex = [variableMap count]
    [!?variableMap insertKey !name !variableIndex]
    [!?outputVariableMap insertKey !name !variableIndex]
    outputAndInternalVariableList += !name.string
  end
  let outputAndInternalVarCount = [outputAndInternalVariableList length]
#---------- Enter input variables
  var @stringlist inputVariableList = {}
  for (name) in self.mInputVariableList do
    [!?variableMap insertKey !name ![variableMap count]]
    inputVariableList += !name.string
  end
  let inputVariableCount = [inputVariableList length]
  let allVariableCount = inputVariableCount + outputAndInternalVarCount
  let exportedVariableCount = inputVariableCount + outputVarCount
#---------- Enter assignments
  var @stringset assignedOutputVariableSet = {}
  for (targetVar *) in self.mAssignmentList do
    [variableMap searchKey !targetVar ?*]
    if not [outputVariableMap hasKey !targetVar.string] then
      error targetVar : "this variable should be an output variable"
    elsif [assignedOutputVariableSet hasKey !targetVar.string] then
      error targetVar : "output variable has been already assigned"
    end
    assignedOutputVariableSet += !targetVar.string
  end
#---------- Enter assignments
  for (blockName blockInputVarList blockOutputVarList) in self.mImportedBlockList do
    [blockMap searchKey !blockName ?let importedBlock]
    if [importedBlock.mInputVariableList length] != [blockInputVarList length] then
      error blockName : "this block is defined with " + [importedBlock.mInputVariableList length] + " input variable(s)"
    end
    if [importedBlock.mOutputVariableList length] != [blockOutputVarList length] then
      error blockName : "this block is defined with " + [importedBlock.mOutputVariableList length] + " output variable(s)"
    end
    for (name) in blockOutputVarList do
      assignedOutputVariableSet += !name.string
    end
  end
#---------- Check all ouput variable has been assigned
  for (unassignedVar) in [outputVariableMap keySet] - assignedOutputVariableSet do
    error [outputVariableMap locationForKey !unassignedVar] : "this output variable should be assigned"
  end
#  log variableMap
#---------- Compute states and transitions ...
  var blockStates = @binaryset.fullBinarySet
  var blockTransitions = @binaryset.emptyBinarySet
#--- ... for assignment list
  for (targetVar expression) in self.mAssignmentList do
  #--- Target var BDD
    [variableMap searchKey !targetVar ?let targetVarIndex]
  #--- Accumulate state
    let stateExpressionBDD = [expression computeStateExpression !variableMap]
    let targetVarBDD = @binaryset.binarySetWithBit {!targetVarIndex}
    blockStates = blockStates & [targetVarBDD equalTo !stateExpressionBDD]
  #--- Accumulate transitions
    let transitionExpressionBDD = [expression computeTransitionExpression !variableMap !outputAndInternalVarCount]
    let shiftedTargetVarBDD = @binaryset.binarySetWithBit {!targetVarIndex + allVariableCount}
    blockTransitions = blockTransitions | [shiftedTargetVarBDD equalTo !transitionExpressionBDD]
  end
#--- ... for imported blocks
  for (blockName blockInputVarList blockOutputVarList) in self.mImportedBlockList do
    [blockMap searchKey !blockName ?let importedBlock]
    var @uintlist transposition = {}
    for (name) in blockOutputVarList do
      [variableMap searchKey !name ?let varIndex]
      transposition += !varIndex
    end
    for (name) in blockInputVarList do
      [variableMap searchKey !name ?let varIndex]
      transposition += !varIndex
    end
    blockStates = blockStates & [importedBlock.mStates transposedBy !transposition]
    for (name) in blockOutputVarList do
      [variableMap searchKey !name ?let varIndex]
      transposition += !varIndex + allVariableCount
    end
    for (name) in blockInputVarList do
      [variableMap searchKey !name ?let varIndex]
      transposition += !varIndex + allVariableCount
    end
    blockTransitions = blockTransitions | [importedBlock.mTransitions transposedBy !transposition]
  end
#---------- Constraint with stable source states
  blockTransitions = blockTransitions & blockStates
#---------- Constraint with stable target states
  blockTransitions = blockTransitions & (blockStates << allVariableCount)
#---------- remove internal variables
  if internalVarCount > 0 then
    var @uintlist stateTranspositionVector = {}
    var idx = 0
    for (*) in self.mOutputVariableList do
      stateTranspositionVector += !idx
      idx += 1
    end
    for (*) in self.mInternalVariableList do
      stateTranspositionVector += !idx + inputVariableCount
      idx += 1
    end
    for (*) in self.mInputVariableList do
      stateTranspositionVector += !idx - internalVarCount
      idx += 1
    end
    blockStates = [blockStates transposedBy !stateTranspositionVector]
    blockStates = [blockStates existOnBitIndexAndBeyond !exportedVariableCount]
  #--- Transpose transitions
    var @uintlist transTranspositionVector = {}
    idx = 0
    for (*) in self.mOutputVariableList do
      transTranspositionVector += !idx
      idx += 1
    end
    for (*) in self.mInternalVariableList do
      transTranspositionVector += !idx + exportedVariableCount + inputVariableCount
      idx += 1
    end
    for (*) in self.mInputVariableList do
      transTranspositionVector += !idx - internalVarCount
      idx += 1
    end
    for (*) in self.mOutputVariableList do
      transTranspositionVector += !idx - internalVarCount
      idx += 1
    end
    for (*) in self.mInternalVariableList do
      transTranspositionVector += !idx + inputVariableCount
      idx += 1
    end
    for (*) in self.mInputVariableList do
      transTranspositionVector += !idx - 2 * internalVarCount
      idx += 1
    end
    # log transTranspositionVector
    blockTransitions = [blockTransitions transposedBy !transTranspositionVector]
    blockTransitions = [blockTransitions existOnBitIndexAndBeyond !2 * exportedVariableCount]
  end
#---------- Display states result
  print (![[blockStates valueCount !exportedVariableCount] string]
      + " states (" + [[blockStates nodeCount] string] + " BDD nodes)\n")
#---------- Display transitions
  print (![[blockTransitions valueCount !2* exportedVariableCount] string] + " transitions (" +
     [[blockTransitions nodeCount] string] + " BDD nodes)\n")
#---------- Enter in block map
   let bloc = @block.new {!inputVariableList !outputVariableList !blockStates !blockTransitions}
  [!?blockMap insertKey !self.mBlockName !bloc]
#------------------------------ States completion
  let incompleteStates = [bloc uncompleteStates]
  let incompleteStateCount = [incompleteStates valueCount !exportedVariableCount]
  if incompleteStateCount == 0 then
    print (!"All states are complete.\n")
  else
    print (!""
       + incompleteStateCount + " incomplete state" + if incompleteStateCount > 1 then "s" else "" end + " ("
       + [incompleteStates nodeCount]
       + " BDD nodes)\n")
  end
#------------------------------ Check no ambiguous transition
  let ambiguousTransitions = [bloc ambiguousTransitions]
#--- Ambiguous transition count
  let ambiguousTransitionCount = [ambiguousTransitions valueCount !2 * exportedVariableCount]
#--- Display ampbiguous transitions
  if ambiguousTransitionCount == 0 then
    print (!"No ambiguous transition.\n")
  else
    print (![ambiguousTransitionCount string]
      + " ambiguous transition" + if ambiguousTransitionCount > 1 then "s" else "" end + " ("
      + [[ambiguousTransitions nodeCount] string]
      + " BDD nodes)\n")
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

